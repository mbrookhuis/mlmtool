// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	rest "mlmtool/pkg/util/rest"

	mock "github.com/stretchr/testify/mock"
)

// ISuseManagerAPI is an autogenerated mock type for the ISuseManagerAPI type
type ISuseManagerAPI struct {
	mock.Mock
}

// SuseManagerCall provides a mock function with given fields: body, method, hostname, path, sessionKey
func (_m *ISuseManagerAPI) SuseManagerCall(body []byte, method string, hostname string, path string, sessionKey string) (*rest.HTTPHelperStruct, error) {
	ret := _m.Called(body, method, hostname, path, sessionKey)

	var r0 *rest.HTTPHelperStruct
	if rf, ok := ret.Get(0).(func([]byte, string, string, string, string) *rest.HTTPHelperStruct); ok {
		r0 = rf(body, method, hostname, path, sessionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.HTTPHelperStruct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, string, string, string, string) error); ok {
		r1 = rf(body, method, hostname, path, sessionKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewISuseManagerAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewISuseManagerAPI creates a new instance of ISuseManagerAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISuseManagerAPI(t mockConstructorTestingTNewISuseManagerAPI) *ISuseManagerAPI {
	mock := &ISuseManagerAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
