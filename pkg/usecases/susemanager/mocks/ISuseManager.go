// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	susemanager "mlmtool/pkg/usecases/susemanager"

	mock "github.com/stretchr/testify/mock"
)

// ISuseManager is an autogenerated mock type for the ISuseManager type
type ISuseManager struct {
	mock.Mock
}

// ChangeChannels provides a mock function with given fields:  auth, systemID, targetedVersion
func (_m *ISuseManager) ChangeChannels(auth susemanager.AuthParams, systemID int, targetedVersion string) error {
	ret := _m.Called(auth, systemID, targetedVersion)

	if len(ret) == 0 {
		panic("no return value specified for ChangeChannels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string) error); ok {
		r0 = rf(auth, systemID, targetedVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAuth provides a mock function with given fields: sessionkey
func (_m *ISuseManager) GetAuth(sessionkey string) (*susemanager.AuthParams, error) {
	ret := _m.Called(sessionkey)

	if len(ret) == 0 {
		panic("no return value specified for GetAuth")
	}

	var r0 *susemanager.AuthParams
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*susemanager.AuthParams, error)); ok {
		return rf(sessionkey)
	}
	if rf, ok := ret.Get(0).(func(string) *susemanager.AuthParams); ok {
		r0 = rf(sessionkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*susemanager.AuthParams)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionkey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHost provides a mock function with given fields:  negName, sessionKey
func (_m *ISuseManager) GetHost(negName string, sessionKey string) (*susemanager.AuthParams, error) {
	ret := _m.Called(negName, sessionKey)

	if len(ret) == 0 {
		panic("no return value specified for GetHost")
	}

	var r0 *susemanager.AuthParams
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*susemanager.AuthParams, error)); ok {
		return rf(negName, sessionKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) *susemanager.AuthParams); ok {
		r0 = rf(negName, sessionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*susemanager.AuthParams)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(negName, sessionKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemGroupName provides a mock function with given fields: negName
func (_m *ISuseManager) GetSystemGroupName(negName string) string {
	ret := _m.Called(negName)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemGroupName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(negName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InstallPackages provides a mock function with given fields:  auth, systemID, pkgs, timeout
func (_m *ISuseManager) InstallPackages(auth susemanager.AuthParams, systemID int, pkgs []string, timeout int) error {
	ret := _m.Called(auth, systemID, pkgs, timeout)

	if len(ret) == 0 {
		panic("no return value specified for InstallPackages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, []string, int) error); ok {
		r0 = rf(auth, systemID, pkgs, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetK3sDetails provides a mock function with given fields:  auth, systemgroupName, k3sconfiginput
func (_m *ISuseManager) SetK3sDetails(auth susemanager.AuthParams, systemgroupName string, k3sconfiginput map[string]interface{}) error {
	ret := _m.Called(auth, systemgroupName, k3sconfiginput)

	if len(ret) == 0 {
		panic("no return value specified for SetK3sDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, map[string]interface{}) error); ok {
		r0 = rf(auth, systemgroupName, k3sconfiginput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISuseManager creates a new instance of ISuseManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISuseManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISuseManager {
	mock := &ISuseManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
