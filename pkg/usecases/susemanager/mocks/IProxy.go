// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	rest "mlmtool/pkg/util/rest"

	mock "github.com/stretchr/testify/mock"

	sumamodels "mlmtool/pkg/models/susemanager"

	susemanager "mlmtool/pkg/usecases/susemanager"
)

// IProxy is an autogenerated mock type for the IProxy type
type IProxy struct {
	mock.Mock
}

// ActivationKeyAddChildChannels provides a mock function with given fields: auth, keyName, childChannels
func (_m *IProxy) ActivationKeyAddChildChannels(auth susemanager.AuthParams, keyName string, childChannels []string) (int, error) {
	ret := _m.Called(auth, keyName, childChannels)

	if len(ret) == 0 {
		panic("no return value specified for ActivationKeyAddChildChannels")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, []string) (int, error)); ok {
		return rf(auth, keyName, childChannels)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, []string) int); ok {
		r0 = rf(auth, keyName, childChannels)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, []string) error); ok {
		r1 = rf(auth, keyName, childChannels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivationKeyAddServerGroups provides a mock function with given fields: auth, keyName, groups
func (_m *IProxy) ActivationKeyAddServerGroups(auth susemanager.AuthParams, keyName string, groups []int) (int, error) {
	ret := _m.Called(auth, keyName, groups)

	if len(ret) == 0 {
		panic("no return value specified for ActivationKeyAddServerGroups")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, []int) (int, error)); ok {
		return rf(auth, keyName, groups)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, []int) int); ok {
		r0 = rf(auth, keyName, groups)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, []int) error); ok {
		r1 = rf(auth, keyName, groups)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivationKeyCreate provides a mock function with given fields: auth, keyName, baseChannel, entitlement
func (_m *IProxy) ActivationKeyCreate(auth susemanager.AuthParams, keyName string, baseChannel string, entitlement []string) (string, error) {
	ret := _m.Called(auth, keyName, baseChannel, entitlement)

	if len(ret) == 0 {
		panic("no return value specified for ActivationKeyCreate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, []string) (string, error)); ok {
		return rf(auth, keyName, baseChannel, entitlement)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, []string) string); ok {
		r0 = rf(auth, keyName, baseChannel, entitlement)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, []string) error); ok {
		r1 = rf(auth, keyName, baseChannel, entitlement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivationKeyDelete provides a mock function with given fields: auth, keyName
func (_m *IProxy) ActivationKeyDelete(auth susemanager.AuthParams, keyName string) (int, error) {
	ret := _m.Called(auth, keyName)

	if len(ret) == 0 {
		panic("no return value specified for ActivationKeyDelete")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (int, error)); ok {
		return rf(auth, keyName)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) int); ok {
		r0 = rf(auth, keyName)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, keyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivationKeyGetDetails provides a mock function with given fields: auth, keyName
func (_m *IProxy) ActivationKeyGetDetails(auth susemanager.AuthParams, keyName string) (sumamodels.ActivationkeyGetDetails, error) {
	ret := _m.Called(auth, keyName)

	if len(ret) == 0 {
		panic("no return value specified for ActivationKeyGetDetails")
	}

	var r0 sumamodels.ActivationkeyGetDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (sumamodels.ActivationkeyGetDetails, error)); ok {
		return rf(auth, keyName)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) sumamodels.ActivationkeyGetDetails); ok {
		r0 = rf(auth, keyName)
	} else {
		r0 = ret.Get(0).(sumamodels.ActivationkeyGetDetails)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, keyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivationKeyListActivationKeys provides a mock function with given fields: auth
func (_m *IProxy) ActivationKeyListActivationKeys(auth susemanager.AuthParams) ([]sumamodels.ActivationkeyGetDetails, error) {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for ActivationKeyListActivationKeys")
	}

	var r0 []sumamodels.ActivationkeyGetDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) ([]sumamodels.ActivationkeyGetDetails, error)); ok {
		return rf(auth)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) []sumamodels.ActivationkeyGetDetails); ok {
		r0 = rf(auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.ActivationkeyGetDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivationKeyRemovePackages provides a mock function with given fields: auth, keyName, pckgs
func (_m *IProxy) ActivationKeyRemovePackages(auth susemanager.AuthParams, keyName string, pckgs []sumamodels.ActivationkeyPackages) (int, error) {
	ret := _m.Called(auth, keyName, pckgs)

	if len(ret) == 0 {
		panic("no return value specified for ActivationKeyRemovePackages")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, []sumamodels.ActivationkeyPackages) (int, error)); ok {
		return rf(auth, keyName, pckgs)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, []sumamodels.ActivationkeyPackages) int); ok {
		r0 = rf(auth, keyName, pckgs)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, []sumamodels.ActivationkeyPackages) error); ok {
		r1 = rf(auth, keyName, pckgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelListSoftwareChannels provides a mock function with given fields: auth
func (_m *IProxy) ChannelListSoftwareChannels(auth susemanager.AuthParams) ([]sumamodels.ChannelListSoftwareChannels, error) {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for ChannelListSoftwareChannels")
	}

	var r0 []sumamodels.ChannelListSoftwareChannels
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) ([]sumamodels.ChannelListSoftwareChannels, error)); ok {
		return rf(auth)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) []sumamodels.ChannelListSoftwareChannels); ok {
		r0 = rf(auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.ChannelListSoftwareChannels)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelSoftwareAssociateRepo provides a mock function with given fields: auth, channelLabel, repoLabel
func (_m *IProxy) ChannelSoftwareAssociateRepo(auth susemanager.AuthParams, channelLabel string, repoLabel string) (sumamodels.ChannelSoftwareListChildren, error) {
	ret := _m.Called(auth, channelLabel, repoLabel)

	if len(ret) == 0 {
		panic("no return value specified for ChannelSoftwareAssociateRepo")
	}

	var r0 sumamodels.ChannelSoftwareListChildren
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string) (sumamodels.ChannelSoftwareListChildren, error)); ok {
		return rf(auth, channelLabel, repoLabel)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string) sumamodels.ChannelSoftwareListChildren); ok {
		r0 = rf(auth, channelLabel, repoLabel)
	} else {
		r0 = ret.Get(0).(sumamodels.ChannelSoftwareListChildren)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string) error); ok {
		r1 = rf(auth, channelLabel, repoLabel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelSoftwareCreate provides a mock function with given fields: auth, label, name, summary, archLabel, parentLabel
func (_m *IProxy) ChannelSoftwareCreate(auth susemanager.AuthParams, label string, name string, summary string, archLabel string, parentLabel string) (int, error) {
	ret := _m.Called(auth, label, name, summary, archLabel, parentLabel)

	if len(ret) == 0 {
		panic("no return value specified for ChannelSoftwareCreate")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string, string) (int, error)); ok {
		return rf(auth, label, name, summary, archLabel, parentLabel)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string, string) int); ok {
		r0 = rf(auth, label, name, summary, archLabel, parentLabel)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, string, string, string) error); ok {
		r1 = rf(auth, label, name, summary, archLabel, parentLabel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelSoftwareCreateRepo provides a mock function with given fields: auth, label, typeRepo, url
func (_m *IProxy) ChannelSoftwareCreateRepo(auth susemanager.AuthParams, label string, typeRepo string, url string) (sumamodels.ChannelSoftwareCreateRepo, error) {
	ret := _m.Called(auth, label, typeRepo, url)

	if len(ret) == 0 {
		panic("no return value specified for ChannelSoftwareCreateRepo")
	}

	var r0 sumamodels.ChannelSoftwareCreateRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string) (sumamodels.ChannelSoftwareCreateRepo, error)); ok {
		return rf(auth, label, typeRepo, url)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string) sumamodels.ChannelSoftwareCreateRepo); ok {
		r0 = rf(auth, label, typeRepo, url)
	} else {
		r0 = ret.Get(0).(sumamodels.ChannelSoftwareCreateRepo)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, string) error); ok {
		r1 = rf(auth, label, typeRepo, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelSoftwareIsExisting provides a mock function with given fields: auth, label
func (_m *IProxy) ChannelSoftwareIsExisting(auth susemanager.AuthParams, label string) (bool, error) {
	ret := _m.Called(auth, label)

	if len(ret) == 0 {
		panic("no return value specified for ChannelSoftwareIsExisting")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (bool, error)); ok {
		return rf(auth, label)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) bool); ok {
		r0 = rf(auth, label)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelSoftwareListChildren provides a mock function with given fields: auth, label
func (_m *IProxy) ChannelSoftwareListChildren(auth susemanager.AuthParams, label string) ([]sumamodels.ChannelSoftwareListChildren, error) {
	ret := _m.Called(auth, label)

	if len(ret) == 0 {
		panic("no return value specified for ChannelSoftwareListChildren")
	}

	var r0 []sumamodels.ChannelSoftwareListChildren
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) ([]sumamodels.ChannelSoftwareListChildren, error)); ok {
		return rf(auth, label)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) []sumamodels.ChannelSoftwareListChildren); ok {
		r0 = rf(auth, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.ChannelSoftwareListChildren)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelSoftwareSyncRepo provides a mock function with given fields: auth, channelLabel
func (_m *IProxy) ChannelSoftwareSyncRepo(auth susemanager.AuthParams, channelLabel string) (int, error) {
	ret := _m.Called(auth, channelLabel)

	if len(ret) == 0 {
		panic("no return value specified for ChannelSoftwareSyncRepo")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (int, error)); ok {
		return rf(auth, channelLabel)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) int); ok {
		r0 = rf(auth, channelLabel)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, channelLabel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckProgress provides a mock function with given fields: auth, actionID, timeout, action, systemID
func (_m *IProxy) CheckProgress(auth susemanager.AuthParams, actionID int, timeout int, action string, systemID int) (int, error) {
	ret := _m.Called(auth, actionID, timeout, action, systemID)

	if len(ret) == 0 {
		panic("no return value specified for CheckProgress")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, int, string, int) (int, error)); ok {
		return rf(auth, actionID, timeout, action, systemID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, int, string, int) int); ok {
		r0 = rf(auth, actionID, timeout, action, systemID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int, int, string, int) error); ok {
		r1 = rf(auth, actionID, timeout, action, systemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckResponseProgress provides a mock function with given fields: auth, response, timeOut, systemID, funcName
func (_m *IProxy) CheckResponseProgress(auth susemanager.AuthParams, response *rest.HTTPHelperStruct, timeOut int, systemID int, funcName string) error {
	ret := _m.Called(auth, response, timeOut, systemID, funcName)

	if len(ret) == 0 {
		panic("no return value specified for CheckResponseProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, *rest.HTTPHelperStruct, int, int, string) error); ok {
		r0 = rf(auth, response, timeOut, systemID, funcName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfigChannelListGlobals provides a mock function with given fields: auth
func (_m *IProxy) ConfigChannelListGlobals(auth susemanager.AuthParams) ([]sumamodels.ConfigChannelListGlobals, error) {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for ConfigChannelListGlobals")
	}

	var r0 []sumamodels.ConfigChannelListGlobals
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) ([]sumamodels.ConfigChannelListGlobals, error)); ok {
		return rf(auth)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) []sumamodels.ConfigChannelListGlobals); ok {
		r0 = rf(auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.ConfigChannelListGlobals)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentManagementAttachFilter provides a mock function with given fields: auth, projectLabel, filterID
func (_m *IProxy) ContentManagementAttachFilter(auth susemanager.AuthParams, projectLabel string, filterID int) (sumamodels.ContentManagementFilter, error) {
	ret := _m.Called(auth, projectLabel, filterID)

	if len(ret) == 0 {
		panic("no return value specified for ContentManagementAttachFilter")
	}

	var r0 sumamodels.ContentManagementFilter
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, int) (sumamodels.ContentManagementFilter, error)); ok {
		return rf(auth, projectLabel, filterID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, int) sumamodels.ContentManagementFilter); ok {
		r0 = rf(auth, projectLabel, filterID)
	} else {
		r0 = ret.Get(0).(sumamodels.ContentManagementFilter)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, int) error); ok {
		r1 = rf(auth, projectLabel, filterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentManagementAttachSource provides a mock function with given fields: auth, projectLabel, sourceType, sourceLabel
func (_m *IProxy) ContentManagementAttachSource(auth susemanager.AuthParams, projectLabel string, sourceType string, sourceLabel string) (sumamodels.ContentManagementSource, error) {
	ret := _m.Called(auth, projectLabel, sourceType, sourceLabel)

	if len(ret) == 0 {
		panic("no return value specified for ContentManagementAttachSource")
	}

	var r0 sumamodels.ContentManagementSource
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string) (sumamodels.ContentManagementSource, error)); ok {
		return rf(auth, projectLabel, sourceType, sourceLabel)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string) sumamodels.ContentManagementSource); ok {
		r0 = rf(auth, projectLabel, sourceType, sourceLabel)
	} else {
		r0 = ret.Get(0).(sumamodels.ContentManagementSource)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, string) error); ok {
		r1 = rf(auth, projectLabel, sourceType, sourceLabel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentManagementBuildProject provides a mock function with given fields: auth, projectLabel
func (_m *IProxy) ContentManagementBuildProject(auth susemanager.AuthParams, projectLabel string) (int, error) {
	ret := _m.Called(auth, projectLabel)

	if len(ret) == 0 {
		panic("no return value specified for ContentManagementBuildProject")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (int, error)); ok {
		return rf(auth, projectLabel)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) int); ok {
		r0 = rf(auth, projectLabel)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, projectLabel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentManagementCreate provides a mock function with given fields: auth, projectLabel, name, description
func (_m *IProxy) ContentManagementCreate(auth susemanager.AuthParams, projectLabel string, name string, description string) (sumamodels.ContentManagementListProjects, error) {
	ret := _m.Called(auth, projectLabel, name, description)

	if len(ret) == 0 {
		panic("no return value specified for ContentManagementCreate")
	}

	var r0 sumamodels.ContentManagementListProjects
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string) (sumamodels.ContentManagementListProjects, error)); ok {
		return rf(auth, projectLabel, name, description)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string) sumamodels.ContentManagementListProjects); ok {
		r0 = rf(auth, projectLabel, name, description)
	} else {
		r0 = ret.Get(0).(sumamodels.ContentManagementListProjects)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, string) error); ok {
		r1 = rf(auth, projectLabel, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentManagementCreateEnvironment provides a mock function with given fields: auth, projectLabel, predecessorLabel, envlabel, name, description
func (_m *IProxy) ContentManagementCreateEnvironment(auth susemanager.AuthParams, projectLabel string, predecessorLabel string, envlabel string, name string, description string) (sumamodels.ContentManagementEnvironment, error) {
	ret := _m.Called(auth, projectLabel, predecessorLabel, envlabel, name, description)

	if len(ret) == 0 {
		panic("no return value specified for ContentManagementCreateEnvironment")
	}

	var r0 sumamodels.ContentManagementEnvironment
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string, string) (sumamodels.ContentManagementEnvironment, error)); ok {
		return rf(auth, projectLabel, predecessorLabel, envlabel, name, description)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string, string) sumamodels.ContentManagementEnvironment); ok {
		r0 = rf(auth, projectLabel, predecessorLabel, envlabel, name, description)
	} else {
		r0 = ret.Get(0).(sumamodels.ContentManagementEnvironment)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, string, string, string) error); ok {
		r1 = rf(auth, projectLabel, predecessorLabel, envlabel, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentManagementCreateFilter provides a mock function with given fields: auth, name, rule, entityType, criteria
func (_m *IProxy) ContentManagementCreateFilter(auth susemanager.AuthParams, name string, rule string, entityType string, criteria sumamodels.FilterCriteria) (sumamodels.ContentManagementFilter, error) {
	ret := _m.Called(auth, name, rule, entityType, criteria)

	if len(ret) == 0 {
		panic("no return value specified for ContentManagementCreateFilter")
	}

	var r0 sumamodels.ContentManagementFilter
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, sumamodels.FilterCriteria) (sumamodels.ContentManagementFilter, error)); ok {
		return rf(auth, name, rule, entityType, criteria)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, sumamodels.FilterCriteria) sumamodels.ContentManagementFilter); ok {
		r0 = rf(auth, name, rule, entityType, criteria)
	} else {
		r0 = ret.Get(0).(sumamodels.ContentManagementFilter)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, string, sumamodels.FilterCriteria) error); ok {
		r1 = rf(auth, name, rule, entityType, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentManagementListFilters provides a mock function with given fields: auth
func (_m *IProxy) ContentManagementListFilters(auth susemanager.AuthParams) ([]sumamodels.ContentManagementFilter, error) {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for ContentManagementListFilters")
	}

	var r0 []sumamodels.ContentManagementFilter
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) ([]sumamodels.ContentManagementFilter, error)); ok {
		return rf(auth)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) []sumamodels.ContentManagementFilter); ok {
		r0 = rf(auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.ContentManagementFilter)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentManagementListProjects provides a mock function with given fields: auth
func (_m *IProxy) ContentManagementListProjects(auth susemanager.AuthParams) ([]sumamodels.ContentManagementListProjects, error) {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for ContentManagementListProjects")
	}

	var r0 []sumamodels.ContentManagementListProjects
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) ([]sumamodels.ContentManagementListProjects, error)); ok {
		return rf(auth)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) []sumamodels.ContentManagementListProjects); ok {
		r0 = rf(auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.ContentManagementListProjects)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormulaSetFormulasOfGroup provides a mock function with given fields: auth, systemID, formulaNames
func (_m *IProxy) FormulaSetFormulasOfGroup(auth susemanager.AuthParams, systemID int, formulaNames []string) (int, error) {
	ret := _m.Called(auth, systemID, formulaNames)

	if len(ret) == 0 {
		panic("no return value specified for FormulaSetFormulasOfGroup")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, []string) (int, error)); ok {
		return rf(auth, systemID, formulaNames)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, []string) int); ok {
		r0 = rf(auth, systemID, formulaNames)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int, []string) error); ok {
		r1 = rf(auth, systemID, formulaNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormulaSetFormulasOfSystem provides a mock function with given fields: auth, systemID, formulaNames
func (_m *IProxy) FormulaSetFormulasOfSystem(auth susemanager.AuthParams, systemID int, formulaNames []string) (int, error) {
	ret := _m.Called(auth, systemID, formulaNames)

	if len(ret) == 0 {
		panic("no return value specified for FormulaSetFormulasOfSystem")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, []string) (int, error)); ok {
		return rf(auth, systemID, formulaNames)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, []string) int); ok {
		r0 = rf(auth, systemID, formulaNames)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int, []string) error); ok {
		r1 = rf(auth, systemID, formulaNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFormulasByGroupID provides a mock function with given fields: auth, groupID
func (_m *IProxy) GetFormulasByGroupID(auth susemanager.AuthParams, groupID int) ([]string, error) {
	ret := _m.Called(auth, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetFormulasByGroupID")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) ([]string, error)); ok {
		return rf(auth, groupID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) []string); ok {
		r0 = rf(auth, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFormulasByServerID provides a mock function with given fields: auth, systemID
func (_m *IProxy) GetFormulasByServerID(auth susemanager.AuthParams, systemID int) ([]string, error) {
	ret := _m.Called(auth, systemID)

	if len(ret) == 0 {
		panic("no return value specified for GetFormulasByServerID")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) ([]string, error)); ok {
		return rf(auth, systemID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) []string); ok {
		r0 = rf(auth, systemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, systemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupFormulaData provides a mock function with given fields: auth, groupID, formulaName
func (_m *IProxy) GetGroupFormulaData(auth susemanager.AuthParams, groupID int, formulaName string) (interface{}, error) {
	ret := _m.Called(auth, groupID, formulaName)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupFormulaData")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string) (interface{}, error)); ok {
		return rf(auth, groupID, formulaName)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string) interface{}); ok {
		r0 = rf(auth, groupID, formulaName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int, string) error); ok {
		r1 = rf(auth, groupID, formulaName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionKey provides a mock function with given fields: body, host
func (_m *IProxy) GetSessionKey(body []byte, host string) (string, error) {
	ret := _m.Called(body, host)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string) (string, error)); ok {
		return rf(body, host)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) string); ok {
		r0 = rf(body, host)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(body, host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSlaves provides a mock function with given fields: sessionKey
func (_m *IProxy) GetSlaves(sessionKey string) ([]sumamodels.Slaves, error) {
	ret := _m.Called(sessionKey)

	if len(ret) == 0 {
		panic("no return value specified for GetSlaves")
	}

	var r0 []sumamodels.Slaves
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]sumamodels.Slaves, error)); ok {
		return rf(sessionKey)
	}
	if rf, ok := ret.Get(0).(func(string) []sumamodels.Slaves); ok {
		r0 = rf(sessionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.Slaves)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemFormulaData provides a mock function with given fields: auth, sid, formulaname
func (_m *IProxy) GetSystemFormulaData(auth susemanager.AuthParams, sid int, formulaname string) (interface{}, error) {
	ret := _m.Called(auth, sid, formulaname)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemFormulaData")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string) (interface{}, error)); ok {
		return rf(auth, sid, formulaname)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string) interface{}); ok {
		r0 = rf(auth, sid, formulaname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int, string) error); ok {
		r1 = rf(auth, sid, formulaname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KickstartDeleteProfile provides a mock function with given fields: auth, profileName
func (_m *IProxy) KickstartDeleteProfile(auth susemanager.AuthParams, profileName string) (int, error) {
	ret := _m.Called(auth, profileName)

	if len(ret) == 0 {
		panic("no return value specified for KickstartDeleteProfile")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (int, error)); ok {
		return rf(auth, profileName)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) int); ok {
		r0 = rf(auth, profileName)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, profileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KickstartImportRawFile provides a mock function with given fields: auth, profileLabel, virtType, channelLabel, dataXML
func (_m *IProxy) KickstartImportRawFile(auth susemanager.AuthParams, profileLabel string, virtType string, channelLabel string, dataXML string) (int, error) {
	ret := _m.Called(auth, profileLabel, virtType, channelLabel, dataXML)

	if len(ret) == 0 {
		panic("no return value specified for KickstartImportRawFile")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string) (int, error)); ok {
		return rf(auth, profileLabel, virtType, channelLabel, dataXML)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string) int); ok {
		r0 = rf(auth, profileLabel, virtType, channelLabel, dataXML)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, string, string) error); ok {
		r1 = rf(auth, profileLabel, virtType, channelLabel, dataXML)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KickstartListKickstarts provides a mock function with given fields: auth
func (_m *IProxy) KickstartListKickstarts(auth susemanager.AuthParams) ([]sumamodels.KickstartListProfiles, error) {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for KickstartListKickstarts")
	}

	var r0 []sumamodels.KickstartListProfiles
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) ([]sumamodels.KickstartListProfiles, error)); ok {
		return rf(auth)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) []sumamodels.KickstartListProfiles); ok {
		r0 = rf(auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.KickstartListProfiles)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KickstartProfileSetVariables provides a mock function with given fields: auth, profileLabel, profileVariables
func (_m *IProxy) KickstartProfileSetVariables(auth susemanager.AuthParams, profileLabel string, profileVariables interface{}) (int, error) {
	ret := _m.Called(auth, profileLabel, profileVariables)

	if len(ret) == 0 {
		panic("no return value specified for KickstartProfileSetVariables")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, interface{}) (int, error)); ok {
		return rf(auth, profileLabel, profileVariables)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, interface{}) int); ok {
		r0 = rf(auth, profileLabel, profileVariables)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, interface{}) error); ok {
		r1 = rf(auth, profileLabel, profileVariables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KickstartTreeCreate provides a mock function with given fields: auth, treeLabel, basePath, channelLabel, installType
func (_m *IProxy) KickstartTreeCreate(auth susemanager.AuthParams, treeLabel string, basePath string, channelLabel string, installType string) (int, error) {
	ret := _m.Called(auth, treeLabel, basePath, channelLabel, installType)

	if len(ret) == 0 {
		panic("no return value specified for KickstartTreeCreate")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string) (int, error)); ok {
		return rf(auth, treeLabel, basePath, channelLabel, installType)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string) int); ok {
		r0 = rf(auth, treeLabel, basePath, channelLabel, installType)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, string, string) error); ok {
		r1 = rf(auth, treeLabel, basePath, channelLabel, installType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KickstartTreeCreateKernelOptions provides a mock function with given fields: auth, treeLabel, basePath, channelLabel, installType, kernelOptions, postKernelOptions
func (_m *IProxy) KickstartTreeCreateKernelOptions(auth susemanager.AuthParams, treeLabel string, basePath string, channelLabel string, installType string, kernelOptions string, postKernelOptions string) (int, error) {
	ret := _m.Called(auth, treeLabel, basePath, channelLabel, installType, kernelOptions, postKernelOptions)

	if len(ret) == 0 {
		panic("no return value specified for KickstartTreeCreateKernelOptions")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string, string, string) (int, error)); ok {
		return rf(auth, treeLabel, basePath, channelLabel, installType, kernelOptions, postKernelOptions)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string, string, string, string, string) int); ok {
		r0 = rf(auth, treeLabel, basePath, channelLabel, installType, kernelOptions, postKernelOptions)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string, string, string, string, string) error); ok {
		r1 = rf(auth, treeLabel, basePath, channelLabel, installType, kernelOptions, postKernelOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KickstartTreeGetDetails provides a mock function with given fields: auth, distributionName
func (_m *IProxy) KickstartTreeGetDetails(auth susemanager.AuthParams, distributionName string) (sumamodels.KickstartTreeGetDetails, error) {
	ret := _m.Called(auth, distributionName)

	if len(ret) == 0 {
		panic("no return value specified for KickstartTreeGetDetails")
	}

	var r0 sumamodels.KickstartTreeGetDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (sumamodels.KickstartTreeGetDetails, error)); ok {
		return rf(auth, distributionName)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) sumamodels.KickstartTreeGetDetails); ok {
		r0 = rf(auth, distributionName)
	} else {
		r0 = ret.Get(0).(sumamodels.KickstartTreeGetDetails)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, distributionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCompleteSystem provides a mock function with given fields: auth, actionID
func (_m *IProxy) ListCompleteSystem(auth susemanager.AuthParams, actionID int) ([]interface{}, error) {
	ret := _m.Called(auth, actionID)

	if len(ret) == 0 {
		panic("no return value specified for ListCompleteSystem")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) ([]interface{}, error)); ok {
		return rf(auth, actionID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) []interface{}); ok {
		r0 = rf(auth, actionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, actionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInprogressSystem provides a mock function with given fields: auth, actionID
func (_m *IProxy) ListInprogressSystem(auth susemanager.AuthParams, actionID int) ([]interface{}, error) {
	ret := _m.Called(auth, actionID)

	if len(ret) == 0 {
		panic("no return value specified for ListInprogressSystem")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) ([]interface{}, error)); ok {
		return rf(auth, actionID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) []interface{}); ok {
		r0 = rf(auth, actionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, actionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLatestInstallablePackages provides a mock function with given fields: auth, systemID
func (_m *IProxy) ListLatestInstallablePackages(auth susemanager.AuthParams, systemID int) ([]sumamodels.InstallablePackage, error) {
	ret := _m.Called(auth, systemID)

	if len(ret) == 0 {
		panic("no return value specified for ListLatestInstallablePackages")
	}

	var r0 []sumamodels.InstallablePackage
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) ([]sumamodels.InstallablePackage, error)); ok {
		return rf(auth, systemID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) []sumamodels.InstallablePackage); ok {
		r0 = rf(auth, systemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.InstallablePackage)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, systemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchedulePackageRefresh provides a mock function with given fields: auth, systemID
func (_m *IProxy) SchedulePackageRefresh(auth susemanager.AuthParams, systemID int) error {
	ret := _m.Called(auth, systemID)

	if len(ret) == 0 {
		panic("no return value specified for SchedulePackageRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) error); ok {
		r0 = rf(auth, systemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleScriptRun provides a mock function with given fields: auth, systemID, timeout, script
func (_m *IProxy) ScheduleScriptRun(auth susemanager.AuthParams, systemID int, timeout int, script string) error {
	ret := _m.Called(auth, systemID, timeout, script)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleScriptRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, int, string) error); ok {
		r0 = rf(auth, systemID, timeout, script)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGroupFormulaData provides a mock function with given fields: auth, groupID, formulaName, formulaData
func (_m *IProxy) SetGroupFormulaData(auth susemanager.AuthParams, groupID int, formulaName string, formulaData interface{}) (int, error) {
	ret := _m.Called(auth, groupID, formulaName, formulaData)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupFormulaData")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string, interface{}) (int, error)); ok {
		return rf(auth, groupID, formulaName, formulaData)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string, interface{}) int); ok {
		r0 = rf(auth, groupID, formulaName, formulaData)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int, string, interface{}) error); ok {
		r1 = rf(auth, groupID, formulaName, formulaData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSystemFormulaData provides a mock function with given fields: auth, systemID, formulaName, formulaData
func (_m *IProxy) SetSystemFormulaData(auth susemanager.AuthParams, systemID int, formulaName string, formulaData interface{}) (int, error) {
	ret := _m.Called(auth, systemID, formulaName, formulaData)

	if len(ret) == 0 {
		panic("no return value specified for SetSystemFormulaData")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string, interface{}) (int, error)); ok {
		return rf(auth, systemID, formulaName, formulaData)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string, interface{}) int); ok {
		r0 = rf(auth, systemID, formulaName, formulaData)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int, string, interface{}) error); ok {
		r1 = rf(auth, systemID, formulaName, formulaData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SumanLogin provides a mock function with given fields:
func (_m *IProxy) SumanLogin() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SumanLogin")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SumanLogout provides a mock function with given fields: auth
func (_m *IProxy) SumanLogout(auth susemanager.AuthParams) error {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for SumanLogout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) error); ok {
		r0 = rf(auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncMasterCreate provides a mock function with given fields: auth, masterFQDN
func (_m *IProxy) SyncMasterCreate(auth susemanager.AuthParams, masterFQDN string) (sumamodels.SlavesIssMaster, error) {
	ret := _m.Called(auth, masterFQDN)

	if len(ret) == 0 {
		panic("no return value specified for SyncMasterCreate")
	}

	var r0 sumamodels.SlavesIssMaster
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (sumamodels.SlavesIssMaster, error)); ok {
		return rf(auth, masterFQDN)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) sumamodels.SlavesIssMaster); ok {
		r0 = rf(auth, masterFQDN)
	} else {
		r0 = ret.Get(0).(sumamodels.SlavesIssMaster)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, masterFQDN)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncMasterDelete provides a mock function with given fields: auth, masterID
func (_m *IProxy) SyncMasterDelete(auth susemanager.AuthParams, masterID int) (int, error) {
	ret := _m.Called(auth, masterID)

	if len(ret) == 0 {
		panic("no return value specified for SyncMasterDelete")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) (int, error)); ok {
		return rf(auth, masterID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) int); ok {
		r0 = rf(auth, masterID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, masterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncMasterGetMasterByLabel provides a mock function with given fields: auth, slaveFQDN
func (_m *IProxy) SyncMasterGetMasterByLabel(auth susemanager.AuthParams, slaveFQDN string) (sumamodels.SlavesIssMaster, error) {
	ret := _m.Called(auth, slaveFQDN)

	if len(ret) == 0 {
		panic("no return value specified for SyncMasterGetMasterByLabel")
	}

	var r0 sumamodels.SlavesIssMaster
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (sumamodels.SlavesIssMaster, error)); ok {
		return rf(auth, slaveFQDN)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) sumamodels.SlavesIssMaster); ok {
		r0 = rf(auth, slaveFQDN)
	} else {
		r0 = ret.Get(0).(sumamodels.SlavesIssMaster)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, slaveFQDN)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncMasterMakeDefault provides a mock function with given fields: auth, masterID
func (_m *IProxy) SyncMasterMakeDefault(auth susemanager.AuthParams, masterID int) (int, error) {
	ret := _m.Called(auth, masterID)

	if len(ret) == 0 {
		panic("no return value specified for SyncMasterMakeDefault")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) (int, error)); ok {
		return rf(auth, masterID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) int); ok {
		r0 = rf(auth, masterID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, masterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncMasterSetCaCert provides a mock function with given fields: auth, masterID, caCert
func (_m *IProxy) SyncMasterSetCaCert(auth susemanager.AuthParams, masterID int, caCert string) (int, error) {
	ret := _m.Called(auth, masterID, caCert)

	if len(ret) == 0 {
		panic("no return value specified for SyncMasterSetCaCert")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string) (int, error)); ok {
		return rf(auth, masterID, caCert)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string) int); ok {
		r0 = rf(auth, masterID, caCert)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int, string) error); ok {
		r1 = rf(auth, masterID, caCert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncSlaveCreate provides a mock function with given fields: auth, slaveFQDN, isEnabled, allowAllOrgs
func (_m *IProxy) SyncSlaveCreate(auth susemanager.AuthParams, slaveFQDN string, isEnabled bool, allowAllOrgs bool) (sumamodels.Slaves, error) {
	ret := _m.Called(auth, slaveFQDN, isEnabled, allowAllOrgs)

	if len(ret) == 0 {
		panic("no return value specified for SyncSlaveCreate")
	}

	var r0 sumamodels.Slaves
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, bool, bool) (sumamodels.Slaves, error)); ok {
		return rf(auth, slaveFQDN, isEnabled, allowAllOrgs)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, bool, bool) sumamodels.Slaves); ok {
		r0 = rf(auth, slaveFQDN, isEnabled, allowAllOrgs)
	} else {
		r0 = ret.Get(0).(sumamodels.Slaves)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, bool, bool) error); ok {
		r1 = rf(auth, slaveFQDN, isEnabled, allowAllOrgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncSlaveDelete provides a mock function with given fields: auth, slaveID
func (_m *IProxy) SyncSlaveDelete(auth susemanager.AuthParams, slaveID int) (int, error) {
	ret := _m.Called(auth, slaveID)

	if len(ret) == 0 {
		panic("no return value specified for SyncSlaveDelete")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) (int, error)); ok {
		return rf(auth, slaveID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) int); ok {
		r0 = rf(auth, slaveID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, slaveID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncSlaveGetSlaveByName provides a mock function with given fields: auth, slaveFQDN
func (_m *IProxy) SyncSlaveGetSlaveByName(auth susemanager.AuthParams, slaveFQDN string) (sumamodels.Slaves, error) {
	ret := _m.Called(auth, slaveFQDN)

	if len(ret) == 0 {
		panic("no return value specified for SyncSlaveGetSlaveByName")
	}

	var r0 sumamodels.Slaves
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (sumamodels.Slaves, error)); ok {
		return rf(auth, slaveFQDN)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) sumamodels.Slaves); ok {
		r0 = rf(auth, slaveFQDN)
	} else {
		r0 = ret.Get(0).(sumamodels.Slaves)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, slaveFQDN)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemGetID provides a mock function with given fields: auth, systemName
func (_m *IProxy) SystemGetID(auth susemanager.AuthParams, systemName string) ([]sumamodels.System, error) {
	ret := _m.Called(auth, systemName)

	if len(ret) == 0 {
		panic("no return value specified for SystemGetID")
	}

	var r0 []sumamodels.System
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) ([]sumamodels.System, error)); ok {
		return rf(auth, systemName)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) []sumamodels.System); ok {
		r0 = rf(auth, systemName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.System)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, systemName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemGetScriptResult provides a mock function with given fields: auth, actionID, resultCompleted
func (_m *IProxy) SystemGetScriptResult(auth susemanager.AuthParams, actionID int, resultCompleted int) (string, error) {
	ret := _m.Called(auth, actionID, resultCompleted)

	if len(ret) == 0 {
		panic("no return value specified for SystemGetScriptResult")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, int) (string, error)); ok {
		return rf(auth, actionID, resultCompleted)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, int) string); ok {
		r0 = rf(auth, actionID, resultCompleted)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int, int) error); ok {
		r1 = rf(auth, actionID, resultCompleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemGetSubscribedBaseChannel provides a mock function with given fields: auth, systemID
func (_m *IProxy) SystemGetSubscribedBaseChannel(auth susemanager.AuthParams, systemID int) (sumamodels.SubscribedBaseChannel, error) {
	ret := _m.Called(auth, systemID)

	if len(ret) == 0 {
		panic("no return value specified for SystemGetSubscribedBaseChannel")
	}

	var r0 sumamodels.SubscribedBaseChannel
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) (sumamodels.SubscribedBaseChannel, error)); ok {
		return rf(auth, systemID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) sumamodels.SubscribedBaseChannel); ok {
		r0 = rf(auth, systemID)
	} else {
		r0 = ret.Get(0).(sumamodels.SubscribedBaseChannel)
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, systemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemGroupCreate provides a mock function with given fields: auth, groupName, description
func (_m *IProxy) SystemGroupCreate(auth susemanager.AuthParams, groupName string, description string) (*sumamodels.SystemGroupGetDetails, error) {
	ret := _m.Called(auth, groupName, description)

	if len(ret) == 0 {
		panic("no return value specified for SystemGroupCreate")
	}

	var r0 *sumamodels.SystemGroupGetDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string) (*sumamodels.SystemGroupGetDetails, error)); ok {
		return rf(auth, groupName, description)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string, string) *sumamodels.SystemGroupGetDetails); ok {
		r0 = rf(auth, groupName, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sumamodels.SystemGroupGetDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string, string) error); ok {
		r1 = rf(auth, groupName, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemGroupGetDetails provides a mock function with given fields: auth, groupName
func (_m *IProxy) SystemGroupGetDetails(auth susemanager.AuthParams, groupName string) (*sumamodels.SystemGroupGetDetails, error) {
	ret := _m.Called(auth, groupName)

	if len(ret) == 0 {
		panic("no return value specified for SystemGroupGetDetails")
	}

	var r0 *sumamodels.SystemGroupGetDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) (*sumamodels.SystemGroupGetDetails, error)); ok {
		return rf(auth, groupName)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) *sumamodels.SystemGroupGetDetails); ok {
		r0 = rf(auth, groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sumamodels.SystemGroupGetDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemGroupListActiveSystemsInGroup provides a mock function with given fields: auth, groupName
func (_m *IProxy) SystemGroupListActiveSystemsInGroup(auth susemanager.AuthParams, groupName string) ([]int, error) {
	ret := _m.Called(auth, groupName)

	if len(ret) == 0 {
		panic("no return value specified for SystemGroupListActiveSystemsInGroup")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) ([]int, error)); ok {
		return rf(auth, groupName)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) []int); ok {
		r0 = rf(auth, groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemGroupListSystemsMinimal provides a mock function with given fields: auth, groupName
func (_m *IProxy) SystemGroupListSystemsMinimal(auth susemanager.AuthParams, groupName string) ([]sumamodels.SystemGroupListSystemsMinimal, error) {
	ret := _m.Called(auth, groupName)

	if len(ret) == 0 {
		panic("no return value specified for SystemGroupListSystemsMinimal")
	}

	var r0 []sumamodels.SystemGroupListSystemsMinimal
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) ([]sumamodels.SystemGroupListSystemsMinimal, error)); ok {
		return rf(auth, groupName)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, string) []sumamodels.SystemGroupListSystemsMinimal); ok {
		r0 = rf(auth, groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.SystemGroupListSystemsMinimal)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, string) error); ok {
		r1 = rf(auth, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemListActiveSystems provides a mock function with given fields: auth
func (_m *IProxy) SystemListActiveSystems(auth susemanager.AuthParams) ([]sumamodels.ActiveSystem, error) {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for SystemListActiveSystems")
	}

	var r0 []sumamodels.ActiveSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) ([]sumamodels.ActiveSystem, error)); ok {
		return rf(auth)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams) []sumamodels.ActiveSystem); ok {
		r0 = rf(auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.ActiveSystem)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams) error); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemListInstalledPackages provides a mock function with given fields: auth, systemID
func (_m *IProxy) SystemListInstalledPackages(auth susemanager.AuthParams, systemID int) ([]sumamodels.InstalledPackage, error) {
	ret := _m.Called(auth, systemID)

	if len(ret) == 0 {
		panic("no return value specified for SystemListInstalledPackages")
	}

	var r0 []sumamodels.InstalledPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) ([]sumamodels.InstalledPackage, error)); ok {
		return rf(auth, systemID)
	}
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int) []sumamodels.InstalledPackage); ok {
		r0 = rf(auth, systemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sumamodels.InstalledPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(susemanager.AuthParams, int) error); ok {
		r1 = rf(auth, systemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemScheduleApplyHighstate provides a mock function with given fields: auth, systemID, timeout
func (_m *IProxy) SystemScheduleApplyHighstate(auth susemanager.AuthParams, systemID int, timeout int) error {
	ret := _m.Called(auth, systemID, timeout)

	if len(ret) == 0 {
		panic("no return value specified for SystemScheduleApplyHighstate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, int) error); ok {
		r0 = rf(auth, systemID, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemScheduleApplyStates provides a mock function with given fields: auth, systemID, stateNames, timeout
func (_m *IProxy) SystemScheduleApplyStates(auth susemanager.AuthParams, systemID int, stateNames []string, timeout int) error {
	ret := _m.Called(auth, systemID, stateNames, timeout)

	if len(ret) == 0 {
		panic("no return value specified for SystemScheduleApplyStates")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, []string, int) error); ok {
		r0 = rf(auth, systemID, stateNames, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemScheduleChangeChannels provides a mock function with given fields: auth, systemID, basechannel, childChannel
func (_m *IProxy) SystemScheduleChangeChannels(auth susemanager.AuthParams, systemID int, basechannel string, childChannel []sumamodels.ChannelSoftwareListChildren) error {
	ret := _m.Called(auth, systemID, basechannel, childChannel)

	if len(ret) == 0 {
		panic("no return value specified for SystemScheduleChangeChannels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, string, []sumamodels.ChannelSoftwareListChildren) error); ok {
		r0 = rf(auth, systemID, basechannel, childChannel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemScheduleReboot provides a mock function with given fields: auth, systemID, timeout
func (_m *IProxy) SystemScheduleReboot(auth susemanager.AuthParams, systemID int, timeout int) error {
	ret := _m.Called(auth, systemID, timeout)

	if len(ret) == 0 {
		panic("no return value specified for SystemScheduleReboot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(susemanager.AuthParams, int, int) error); ok {
		r0 = rf(auth, systemID, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIProxy creates a new instance of IProxy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProxy(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProxy {
	mock := &IProxy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
